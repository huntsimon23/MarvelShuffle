{"version":3,"sources":["components/HeroCard/index.js","components/TopScore/index.js","components/Score/index.js","components/GuessState/index.js","App.js","serviceWorker.js","index.js"],"names":["HeroCard","props","react_default","a","createElement","className","src","link","alt","onClick","tally","id","name","TopScore","highScore","Score","guessTally","GuessState","guessState","App","state","heroes","currentClicks","heroClick","_this","includes","setState","shuffle","push","console","log","concat","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this2","this","components_Score","components_GuessState","components_TopScore","map","hero","components_HeroCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1083f939.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction HeroCard(props) {\n  return (\n    <div className=\"card img-fluid img-thumbnail\">\n          <img src={props.link} className=\"card-img-top heropic\" alt={props.link} onClick={() => props.tally(props.id)}/>\n          <div className=\"card-body\">\n          <p className=\"card-text text-center\">{props.name}</p>\n          </div>\n    </div>\n  );\n}\n\nexport default HeroCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TopScore(props) {\n  return (\n    <h4 className=\"topScore\">\n      Top Score: {props.highScore}\n    </h4>\n  );\n}\nexport default TopScore;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return (\n    <h4 className=\"score\">\n      Your Score: {props.guessTally}\n    </h4>\n  );\n}\nexport default Score;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction GuessState(props) {\n  return (\n    <h4 className=\"guessclick\">\n      {props.guessState ? \"Good guess!\" : \"Aww snap, try again!\"}\n    </h4>\n  );\n}\n\nexport default GuessState;\n","import React, { Component }  from 'react';\nimport './App.css';\nimport heroes from './heroes.json';\nimport HeroCard from './components/HeroCard/index.js'\nimport TopScore from './components/TopScore/index.js';\nimport Score from './components/Score/index.js';\nimport GuessState from './components/GuessState/index.js';\n\nclass App extends Component {\n  state = {\n    heroes: heroes,\n    guessState: null,\n    guessTally: 0,\n    highScore: 0,\n    currentClicks: []\n  };\n\n  tally = (heroClick) => {\n    if ((this.state.currentClicks).includes(heroClick)) {\n      if (this.state.highScore < this.state.guessTally) {\n        this.setState({\n          highScore: this.state.guessTally\n        });\n      }\n      this.setState({\n        currentClicks: [],\n        guessTally: 0,\n        guessState: false\n      });\n      this.shuffle(heroes);\n    } else {\n      (this.state.currentClicks).push(heroClick);\n      this.setState({\n        guessState: true,\n        guessTally: this.state.guessTally + 1,\n      });\n      this.shuffle(heroes);\n    };\n    console.log(`Current clicks: ${this.state.currentClicks}`, `Guess Tally: ${this.state.guessTally}`, `Guess State: ${this.state.guessState}`, `High Score: ${this.state.highScore}`);\n  }\n\n    shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  \n  render(){\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-primary\">\n      <img src=\"./assets/images/MarvelLogo.png\" alt=\"\" className=\"mLogo\"/>\n        <h2 className=\"text-center headline\">Marvel Shuffle: click on as many characters as you can without repeating!</h2>\n      <Score \n      guessTally={this.state.guessTally}/>\n      <GuessState \n      guessState={this.state.guessState}/>\n      <TopScore \n      highScore={this.state.highScore}/>\n      </nav>\n      <div className=\"container container-fluid\">\n        <div className=\"row\">\n        {heroes.map(hero => (\n        <HeroCard \n        tally={this.tally}  \n        id={hero.id}\n        key={hero.id}\n        name={hero.name}\n        link={hero.link}\n        />\n        ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}